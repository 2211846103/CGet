import click
import platform
from cget.utils.misc import load_lock


def generate_compiler_options(options: dict) -> str:
  lines = [
    "\n\n# start of compiler options"
  ]
  
  for key, value in options.items():
    if key == "CMAKE_CXX_FLAGS":
      if isinstance(value, list):
        for flag in value:
          lines.append(f'set({key} "${{{key}}} {flag}")')
      else:
          lines.append(f'set({key} "${{{key}}} {value}")')
    else:
      cmake_type = "BOOL" if isinstance(value, bool) else "STRING"
      val_str = "ON" if value is True else "OFF" if value is False else value
      lines.append(f'set({key} {val_str} CACHE {cmake_type} "Auto-generated option")')
      
  lines.append("# end of compiler options")
  
  return "\n".join(lines)


def generate_build_cmake(deps: list[dict] | None, deps_path: str, compiler_options: dict):
  lines = [
    "# Auto-generated by cget build",
    "include(cmake/CPM.cmake)",
    "",
    "# start of dependencies",
    "set(DEPENDENCY_LIBS)",
    "set(MACROS)"
  ]
  
  if not deps:
    click.echo("No dependencies listed in cget.json")
  else:
    click.echo(f"Generating {deps_path.name}...")

    current_platform = platform.system().lower()

    lock = load_lock()

    for name, dep in lock.items():
      if "platforms" in dep and dep["platforms"] and current_platform not in dep["platforms"]:
        continue

      version = dep.get("version")

      lines.append("CPMAddPackage(")
      lines.append(f"  NAME {name}")
      lines.append(f"  VERSION {version}")
      lines.append(f'  SOURCE_DIR "${{CMAKE_SOURCE_DIR}}/.cget_packages/{name}@{version}"')
      lines.append(")\n")

      lines.append(f"list(APPEND DEPENDENCY_LIBS {name}::{name})")
      lines.append(f"list(APPEND MACROS HAS_{name.capitalize()})")

    lines.append("# end of dependencies")

  with open(deps_path, "w") as f:
    f.write("\n".join(lines) + generate_compiler_options(compiler_options))

  click.echo("_dependencies.cmake generated.")